diff --git doomgeneric-clean/doomgeneric/Makefile doomgeneric-workdir/doomgeneric/Makefile
index 503e0dc..c53f021 100644
--- doomgeneric-clean/doomgeneric/Makefile
+++ doomgeneric-workdir/doomgeneric/Makefile
@@ -12,17 +12,17 @@ else
 endif
 
 
-CC=clang  # gcc or g++
+CC=x86_64-pc-nyx-mlibc-gcc
 CFLAGS+=-ggdb3 -Os
 LDFLAGS+=-Wl,--gc-sections
 CFLAGS+=-ggdb3 -Wall -DNORMALUNIX -DLINUX -DSNDSERV -D_DEFAULT_SOURCE # -DUSEASM
-LIBS+=-lm -lc -lX11
+LIBS+=-lm -lc
 
 # subdirectory for objects
 OBJDIR=build
 OUTPUT=doomgeneric
 
-SRC_DOOM = dummy.o am_map.o doomdef.o doomstat.o dstrings.o d_event.o d_items.o d_iwad.o d_loop.o d_main.o d_mode.o d_net.o f_finale.o f_wipe.o g_game.o hu_lib.o hu_stuff.o info.o i_cdmus.o i_endoom.o i_joystick.o i_scale.o i_sound.o i_system.o i_timer.o memio.o m_argv.o m_bbox.o m_cheat.o m_config.o m_controls.o m_fixed.o m_menu.o m_misc.o m_random.o p_ceilng.o p_doors.o p_enemy.o p_floor.o p_inter.o p_lights.o p_map.o p_maputl.o p_mobj.o p_plats.o p_pspr.o p_saveg.o p_setup.o p_sight.o p_spec.o p_switch.o p_telept.o p_tick.o p_user.o r_bsp.o r_data.o r_draw.o r_main.o r_plane.o r_segs.o r_sky.o r_things.o sha1.o sounds.o statdump.o st_lib.o st_stuff.o s_sound.o tables.o v_video.o wi_stuff.o w_checksum.o w_file.o w_main.o w_wad.o z_zone.o w_file_stdc.o i_input.o i_video.o doomgeneric.o doomgeneric_xlib.o
+SRC_DOOM = dummy.o am_map.o doomdef.o doomstat.o dstrings.o d_event.o d_items.o d_iwad.o d_loop.o d_main.o d_mode.o d_net.o f_finale.o f_wipe.o g_game.o hu_lib.o hu_stuff.o info.o i_cdmus.o i_endoom.o i_joystick.o i_scale.o i_sound.o i_system.o i_timer.o memio.o m_argv.o m_bbox.o m_cheat.o m_config.o m_controls.o m_fixed.o m_menu.o m_misc.o m_random.o p_ceilng.o p_doors.o p_enemy.o p_floor.o p_inter.o p_lights.o p_map.o p_maputl.o p_mobj.o p_plats.o p_pspr.o p_saveg.o p_setup.o p_sight.o p_spec.o p_switch.o p_telept.o p_tick.o p_user.o r_bsp.o r_data.o r_draw.o r_main.o r_plane.o r_segs.o r_sky.o r_things.o sha1.o sounds.o statdump.o st_lib.o st_stuff.o s_sound.o tables.o v_video.o wi_stuff.o w_checksum.o w_file.o w_main.o w_wad.o z_zone.o w_file_stdc.o i_input.o i_video.o doomgeneric.o doomgeneric_nyx.o
 OBJS += $(addprefix $(OBJDIR)/, $(SRC_DOOM))
 
 all:	 $(OUTPUT)
diff --git doomgeneric-workdir/doomgeneric/doomgeneric_nyx.c doomgeneric-workdir/doomgeneric/doomgeneric_nyx.c
new file mode 100644
index 0000000..83c9727
--- /dev/null
+++ doomgeneric-workdir/doomgeneric/doomgeneric_nyx.c
@@ -0,0 +1,282 @@
+#include "doomkeys.h"
+
+#include "doomgeneric.h"
+
+#include <ctype.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <linux/fb.h>
+#include <linux/kd.h>
+#include <linux/keyboard.h>
+#include <stdio.h>
+#include <string.h>
+#include <sys/time.h>
+#include <termios.h>
+#include <unistd.h>
+
+static const char ps2_to_doom[] = {
+    /* 0x00 */ 0x00,
+    /* 0x01 */ KEY_ESCAPE,
+    /* 0x02 */ '1',
+    /* 0x03 */ '2',
+    /* 0x04 */ '3',
+    /* 0x05 */ '4',
+    /* 0x06 */ '5',
+    /* 0x07 */ '6',
+    /* 0x08 */ '7',
+    /* 0x09 */ '8',
+    /* 0x0a */ '9',
+    /* 0x0b */ '0',
+    /* 0x0c */ '-',
+    /* 0x0d */ '=',
+    /* 0x0e */ KEY_BACKSPACE,
+    /* 0x0f */ KEY_TAB,
+    /* 0x10 */ 'q',
+    /* 0x11 */ 'w',
+    /* 0x12 */ 'e',
+    /* 0x13 */ 'r',
+    /* 0x14 */ 't',
+    /* 0x15 */ 'y',
+    /* 0x16 */ 'u',
+    /* 0x17 */ 'i',
+    /* 0x18 */ 'o',
+    /* 0x19 */ 'p',
+    /* 0x1a */ '[',
+    /* 0x1b */ ']',
+    /* 0x1c */ KEY_ENTER,
+    /* 0x1d */ KEY_FIRE, /* KEY_RCTRL, */
+    /* 0x1e */ 'a',
+    /* 0x1f */ 's',
+    /* 0x20 */ 'd',
+    /* 0x21 */ 'f',
+    /* 0x22 */ 'g',
+    /* 0x23 */ 'h',
+    /* 0x24 */ 'j',
+    /* 0x25 */ 'k',
+    /* 0x26 */ 'l',
+    /* 0x27 */ ';',
+    /* 0x28 */ '\'',
+    /* 0x29 */ '`',
+    /* 0x2a */ KEY_RSHIFT,
+    /* 0x2b */ '\\',
+    /* 0x2c */ 'z',
+    /* 0x2d */ 'x',
+    /* 0x2e */ 'c',
+    /* 0x2f */ 'v',
+    /* 0x30 */ 'b',
+    /* 0x31 */ 'n',
+    /* 0x32 */ 'm',
+    /* 0x33 */ ',',
+    /* 0x34 */ '.',
+    /* 0x35 */ '/',
+    /* 0x36 */ KEY_RSHIFT,
+    /* 0x37 */ KEYP_MULTIPLY,
+    /* 0x38 */ KEY_LALT,
+    /* 0x39 */ KEY_USE,
+    /* 0x3a */ KEY_CAPSLOCK,
+    /* 0x3b */ KEY_F1,
+    /* 0x3c */ KEY_F2,
+    /* 0x3d */ KEY_F3,
+    /* 0x3e */ KEY_F4,
+    /* 0x3f */ KEY_F5,
+    /* 0x40 */ KEY_F6,
+    /* 0x41 */ KEY_F7,
+    /* 0x42 */ KEY_F8,
+    /* 0x43 */ KEY_F9,
+    /* 0x44 */ KEY_F10,
+    /* 0x45 */ KEY_NUMLOCK,
+    /* 0x46 */ 0x0,
+    /* 0x47 */ 0x0,            /* 47 (Keypad-7/Home) */
+    /* 0x48 */ KEY_UPARROW,    /* 48 (Keypad-8/Up) */
+    /* 0x49 */ 0x0,            /* 49 (Keypad-9/PgUp) */
+    /* 0x4a */ 0x0,            /* 4a (Keypad--) */
+    /* 0x4b */ KEY_LEFTARROW,  /* 4b (Keypad-4/Left) */
+    /* 0x4c */ 0x0,            /* 4c (Keypad-5) */
+    /* 0x4d */ KEY_RIGHTARROW, /* 4d (Keypad-6/Right) */
+    /* 0x4e */ 0x0,            /* 4e (Keypad-+) */
+    /* 0x4f */ 0x0,            /* 4f (Keypad-1/End) */
+    /* 0x50 */ KEY_DOWNARROW,  /* 50 (Keypad-2/Down) */
+    /* 0x51 */ 0x0,            /* 51 (Keypad-3/PgDn) */
+    /* 0x52 */ 0x0,            /* 52 (Keypad-0/Ins) */
+    /* 0x53 */ 0x0,            /* 53 (Keypad-./Del) */
+    /* 0x54 */ 0x0,            /* 54 (Alt-SysRq) on a 84+ key keyboard */
+    /* 0x55 */ 0x0,
+    /* 0x56 */ 0x0,
+    /* 0x57 */ 0x0,
+    /* 0x58 */ 0x0,
+    /* 0x59 */ 0x0,
+    /* 0x5a */ 0x0,
+    /* 0x5b */ 0x0,
+    /* 0x5c */ 0x0,
+    /* 0x5d */ 0x0,
+    /* 0x5e */ 0x0,
+    /* 0x5f */ 0x0,
+    /* 0x60 */ 0x0,
+    /* 0x61 */ 0x0,
+    /* 0x62 */ 0x0,
+    /* 0x63 */ 0x0,
+    /* 0x64 */ 0x0,
+    /* 0x65 */ 0x0,
+    /* 0x66 */ 0x0,
+    /* 0x67 */ KEY_UPARROW,
+    /* 0x68 */ 0x0,
+    /* 0x69 */ KEY_LEFTARROW,
+    /* 0x6a */ KEY_RIGHTARROW,
+    /* 0x6b */ 0x0,
+    /* 0x6c */ KEY_DOWNARROW,
+    /* 0x6d */ 0x0,
+    /* 0x6e */ 0x0,
+    /* 0x6f */ 0x0,
+    /* 0x70 */ 0x0,
+    /* 0x71 */ 0x0,
+    /* 0x72 */ 0x0,
+    /* 0x73 */ 0x0,
+    /* 0x74 */ 0x0,
+    /* 0x75 */ 0x0,
+    /* 0x76 */ 0x0,
+    /* 0x77 */ 0x0,
+    /* 0x78 */ 0x0,
+    /* 0x79 */ 0x0,
+    /* 0x7a */ 0x0,
+    /* 0x7b */ 0x0,
+    /* 0x7c */ 0x0,
+    /* 0x7d */ 0x0,
+    /* 0x7e */ 0x0,
+    /* 0x7f */ KEY_FIRE, // KEY_RCTRL,
+};
+
+static int fbfd, kbfd;
+static struct fb_var_screeninfo fbvs;
+static struct fb_fix_screeninfo fbfs;
+static void *frame;
+static struct termios ttysave;
+
+static struct timespec starttime;
+
+static int seekordie(int fd, off_t offset, int whence) {
+  int ret = lseek(fd, offset, whence);
+  if (ret == -1) {
+    printf("doomgeneric: lseek failed on fd %d: %s", fd, strerror(errno));
+    exit(errno);
+  }
+  return ret;
+}
+
+static int ioctlordie(int fd, unsigned long request, void *arg) {
+  int ret = ioctl(fd, request, arg);
+  if (ret == -1) {
+    printf("doomgeneric: ioctl failed on fd %d: %s\n", fd, strerror(errno));
+    exit(errno);
+  }
+  return ret;
+}
+
+static int openordie(char *name, int flags, int mode) {
+  int fd = open(name, flags, mode);
+  if (fd == -1) {
+    printf("doomgeneric: failed to open %s: %s\n", name, strerror(errno));
+    exit(errno);
+  }
+  return fd;
+}
+
+static int writeordie(int fd, void *buff, size_t count) {
+  int writec = write(fd, buff, count);
+  if (writec == -1) {
+    printf("doomgeneric: write failed on fd %d: %s\n", fd, strerror(errno));
+    exit(errno);
+  }
+
+  return writec;
+}
+
+static int readordie(int fd, void *buff, size_t count) {
+  int readc = read(fd, buff, count);
+  if (readc == -1) {
+    printf("doomgeneric: read failed on fd %d: %s\n", fd, strerror(errno));
+    exit(errno);
+  }
+  return readc;
+}
+
+void cleanup() { tcsetattr(1, TCSAFLUSH, &ttysave); }
+
+void DG_Init() {
+
+  // open needed files
+
+  fbfd = openordie("/dev/fb0", O_WRONLY, 0);
+  kbfd = openordie("/dev/tty", O_RDONLY, 0);
+
+  // get needed fb info
+
+  ioctlordie(fbfd, FBIOGET_VSCREENINFO, &fbvs);
+  ioctlordie(fbfd, FBIOGET_FSCREENINFO, &fbfs);
+
+  ioctlordie(kbfd, KDSKBMODE, K_MEDIUMRAW);
+
+  // make tty raw and nonblocking
+  struct termios tty;
+
+  tcgetattr(1, &tty);
+  ttysave = tty;
+  cfmakeraw(&tty);
+  tty.c_cc[VMIN] = 0;
+  tcsetattr(1, TCSAFLUSH, &tty);
+  atexit(cleanup);
+}
+
+void DG_DrawFrame() {
+  // prepare the frame for writing
+
+  // TODO handle bpp stuff
+
+  off_t moffset =
+      fbfs.line_length * (fbvs.yres / 2 - DOOMGENERIC_RESY / 2) +
+      (fbvs.xres / 2 - DOOMGENERIC_RESX / 2) * (fbvs.bits_per_pixel / 8);
+
+  for (uintmax_t y = 0; y < DOOMGENERIC_RESY; ++y) {
+    uintptr_t foffset = 0;
+    foffset = fbfs.line_length * y;
+    seekordie(fbfd, moffset + fbfs.line_length * y, SEEK_SET);
+    writeordie(fbfd, DG_ScreenBuffer + DOOMGENERIC_RESX * y,
+               DOOMGENERIC_RESX * 4);
+  }
+}
+
+int DG_GetKey(int *pressed, unsigned char *doomkey) {
+  unsigned char data;
+
+  if (read(kbfd, &data, 1) < 1) {
+    return 0;
+  }
+
+  *pressed = (data < 0x80);
+  *doomkey = ps2_to_doom[data & 0x7F];
+
+  return 1;
+}
+
+void DG_SleepMs(uint32_t ms) {
+  // usleep(ms * 1000);
+}
+
+uint32_t DG_GetTicksMs() {
+  struct timeval tp;
+  struct timezone tzp;
+
+  gettimeofday(&tp, &tzp);
+  return (tp.tv_sec * 1000) + (tp.tv_usec / 1000); /* return milliseconds */
+}
+
+void DG_SetWindowTitle(const char *title) {}
+
+int main(int argc, char **argv) {
+  doomgeneric_Create(argc, argv);
+
+  for (int i = 0;; i++) {
+    doomgeneric_Tick();
+  }
+
+  return 0;
+}
\ No newline at end of file
